{
  "folders": [
    {
      "path": "C:\\Dev\\cesium-ng-cesium"
    }
  ],
  "settings": {
    // Suppress incorrect errors for Angular class decorators
    "javascript.implicitProjectConfig.experimentalDecorators": true,
    // Align HTML attributes
    "html.format.wrapAttributes": "force-aligned",
    // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.
    "files.exclude": {
      "**/.git": true,
      "**/bin": true,
      "**/obj": true,
      "**/typings": true,
      "**/*.sln*": true,
      "**/*.nupkg": true,
      "**/*.fpr": true,
      "**/*.js": {
        "when": "$(basename).ts"
      },
      "**/*.js.map": {
        "when": "$(basename)"
      }
    },
    "files.autoSave": "onWindowChange",
    "files.autoSaveDelay": 1000, // Only used when autoSave=afterDelay
    "files.defaultLanguage": "typescript",
    "files.trimTrailingWhitespace": true,
    // MTK npm publish scripts require bash
    //"terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
    "editor.codeActionsOnSave": {
      "source.organizeImports": false
    },
    // Controls if the editor should automatically adjust the indentation when users type, paste or move lines. Indentation rules of the language must be available.
    "editor.autoIndent": true,
    // Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.
    "editor.formatOnSave": true,
    "editor.formatOnPaste": true,
    "editor.formatOnType": false,
    // Insert spaces when pressing Tab. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.insertSpaces": true,
    // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.tabSize": 2,
    "editor.tabCompletion": "on",
    // Report style checks as warnings
    "typescript.reportStyleChecksAsWarnings": true,
    // Enable/disable default JavaScript formatter.
    "javascript.format.enable": true,
    // Defines space handling after a comma delimiter.
    "javascript.format.insertSpaceAfterCommaDelimiter": true,
    // Defines space handling after the constructor keyword. Requires TypeScript >= 2.3.0.
    "javascript.format.insertSpaceAfterConstructor": false,
    // Defines space handling after function keyword for anonymous functions.
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
    // Defines space handling after keywords in a control flow statement.
    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
    // Defines space handling after opening and before closing JSX expression braces. Requires TypeScript >= 2.0.6.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
    // Defines space handling after opening and before closing non empty braces. Requires TypeScript >= 2.3.0.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
    // Defines space handling after opening and before closing non empty brackets.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
    // Defines space handling after opening and before closing non empty parenthesis.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
    // Defines space handling after opening and before closing template string braces. Requires TypeScript >= 2.0.6.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
    //  Defines space handling after a semicolon in a for statement.
    "javascript.format.insertSpaceAfterSemicolonInForStatements": true,
    // Defines space handling after a binary operator.
    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
    // Defines space handling before function argument parentheses. Requires TypeScript >= 2.1.5.
    "javascript.format.insertSpaceBeforeFunctionParenthesis": false,
    // Defines whether an open brace is put onto a new line for control blocks or not.
    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
    // Defines whether an open brace is put onto a new line for functions or not.
    "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

    "workbench.colorCustomizations": {
      "activityBar.background": "#db2dd8",
      "activityBar.activeBorder": "#50520e",
      "activityBar.foreground": "#e7e7e7",
      "activityBar.inactiveForeground": "#e7e7e799",
      "activityBarBadge.background": "#50520e",
      "activityBarBadge.foreground": "#e7e7e7",
      "statusBar.background": "#b61fb3",
      "statusBarItem.hoverBackground": "#db2dd8",
      "statusBar.foreground": "#e7e7e7"
    },
    "peacock.color": "#b61fb3"
  }
}
